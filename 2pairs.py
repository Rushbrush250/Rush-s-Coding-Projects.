{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Rushbrush250/Rush-s-Coding-Projects./blob/main/2pairs.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vZ_turAjXpaB",
        "outputId": "b4d069d6-1d34-4f20-bd7e-25637d7e417a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Game Instructions:\n",
            "\n",
            "1. Your Goal: Find two groups of numbers that add up to a target pair.\n",
            "\n",
            "2. Example:\n",
            "   - Groups:\n",
            "     Group 1: (6, 8)\n",
            "     Group 2: (9, 0)\n",
            "     Group 3: (7, 4)\n",
            "   - Target: (13, 12)\n",
            "\n",
            "3. How to Play:\n",
            "   - Pick the first group. For example, press 1 for Group 1.\n",
            "   - Pick the second group. For example, press 3 for Group 3.\n",
            "\n",
            "4. Winning:\n",
            "   - If the numbers add up to the target (e.g., 6+7=13 and 8+4=12), you win.\n",
            "   - You can add the same group 2 times.\n",
            "   - If not, try again.\n",
            "   - Your end time will be displayed whether you win or lose\n",
            "\n",
            "\n",
            "********************************************************************\n",
            "                         All Pairs\n",
            "\n",
            "            1.[16 13]          2.[19 22]\n",
            "\n",
            "            3.[13  3]           4.[10 13]\n",
            "\n",
            "            5.[7 8]           6.[ 1 15]\n",
            "\n",
            "            7.[23 29]           8.[11 19]\n",
            "\n",
            "            9.[ 6 21]           10.[ 6 17]\n",
            "\n",
            "            11.[10  2]           12.[29 20]\n",
            "\n",
            "                   --Combined Pair--\n",
            "                      [23 16]         What is the two pairs that makes the combined pair?\n",
            "\n",
            "\n",
            "First pair? (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12): 3\n",
            "\n",
            "Second pair?: 7\n",
            "\n",
            "Try again! The pairs don't add up to the target.\n",
            "\n",
            "Your time: 3.4 seconds\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "import random as rd\n",
        "import time as t\n",
        "\n",
        "loop = 0\n",
        "stored = np.array([\n",
        "    [[1, 2], [3, 4], [5, 6], [7, 8]],  # row 0\n",
        "    [[9, 10], [11, 12], [13, 14], [15, 16]],  # row 1\n",
        "    [[17, 18], [19, 20], [21, 22], [23, 24]]  # row 2\n",
        "])\n",
        "\n",
        "def random_choose(iterations, number, data):\n",
        "    if iterations == 1:\n",
        "        data[0, 0, 0] = number\n",
        "    if iterations == 2:\n",
        "        data[0, 0, 1] = number\n",
        "    if iterations == 3:\n",
        "        data[0, 1, 0] = number\n",
        "    if iterations == 4:\n",
        "        data[0, 1, 1] = number\n",
        "    if iterations == 5:\n",
        "        data[0, 2, 0] = number\n",
        "    if iterations == 6:\n",
        "        data[0, 2, 1] = number\n",
        "    if iterations == 7:\n",
        "        data[0, 3, 0] = number\n",
        "    if iterations == 8:\n",
        "        data[0, 3, 1] = number\n",
        "    if iterations == 9:\n",
        "        data[1, 0, 0] = number\n",
        "    if iterations == 10:\n",
        "        data[1, 0, 1] = number\n",
        "    if iterations == 11:\n",
        "        data[1, 1, 0] = number\n",
        "    if iterations == 12:\n",
        "        data[1, 1, 1] = number\n",
        "    if iterations == 13:\n",
        "        data[1, 2, 0] = number\n",
        "    if iterations == 14:\n",
        "        data[1, 2, 1] = number\n",
        "    if iterations == 15:\n",
        "        data[1, 3, 0] = number\n",
        "    if iterations == 16:\n",
        "        data[1, 3, 1] = number\n",
        "    if iterations == 17:\n",
        "        data[2, 0, 0] = number\n",
        "    if iterations == 18:\n",
        "        data[2, 0, 1] = number\n",
        "    if iterations == 19:\n",
        "        data[2, 1, 0] = number\n",
        "    if iterations == 20:\n",
        "        data[2, 1, 1] = number\n",
        "    if iterations == 21:\n",
        "        data[2, 2, 0] = number\n",
        "    if iterations == 22:\n",
        "        data[2, 2, 1] = number\n",
        "    if iterations == 23:\n",
        "        data[2, 3, 0] = number\n",
        "    if iterations == 24:\n",
        "        data[2, 3, 1] = number\n",
        "\n",
        "# Giving the array random numbers\n",
        "while loop < 24:\n",
        "    random_number = rd.randint(1, 30)\n",
        "    random_choose(loop + 1, random_number, stored)  # Corrected index by adding 1 to loop\n",
        "    loop += 1\n",
        "\n",
        "# Now, choosing a random **pair** (2 numbers) from the array\n",
        "flattened_pairs = stored.reshape(12, 2)  # Flatten to 1D and get pairs (2 numbers)\n",
        "random_pair = rd.choice(flattened_pairs)  # Randomly choose a pair from the flattened array\n",
        "random_pair2 = rd.choice(flattened_pairs)\n",
        "\n",
        "print('''Game Instructions:\n",
        "\n",
        "1. Your Goal: Find two groups of numbers that add up to a target pair.\n",
        "\n",
        "2. Example:\n",
        "   - Groups:\n",
        "     Group 1: (6, 8)\n",
        "     Group 2: (9, 0)\n",
        "     Group 3: (7, 4)\n",
        "   - Target: (13, 12)\n",
        "\n",
        "3. How to Play:\n",
        "   - Pick the first group. For example, press 1 for Group 1.\n",
        "   - Pick the second group. For example, press 3 for Group 3.\n",
        "\n",
        "4. Winning:\n",
        "   - If the numbers add up to the target (e.g., 6+7=13 and 8+4=12), you win.\n",
        "   - You can add the same group 2 times.\n",
        "   - If not, try again.\n",
        "   - Your end time will be displayed whether you win or lose\n",
        "\n",
        "''')\n",
        "\n",
        "# Combined pair target (sum of selected pairs)\n",
        "target_pair = random_pair + random_pair2\n",
        "print(f'''********************************************************************\n",
        "                         All Pairs\n",
        "\n",
        "            1.{flattened_pairs[0]}          2.{flattened_pairs[1]}\n",
        "\n",
        "            3.{flattened_pairs[2]}           4.{flattened_pairs[3]}\n",
        "\n",
        "            5.{flattened_pairs[4]}           6.{flattened_pairs[5]}\n",
        "\n",
        "            7.{flattened_pairs[6]}           8.{flattened_pairs[7]}\n",
        "\n",
        "            9.{flattened_pairs[8]}           10.{flattened_pairs[9]}\n",
        "\n",
        "            11.{flattened_pairs[10]}           12.{flattened_pairs[11]}\n",
        "\n",
        "                   --Combined Pair--\n",
        "                      {target_pair}         What is the two pairs that makes the combined pair?\n",
        "\n",
        "''')\n",
        "\n",
        "# Input validation for the first pair\n",
        "timer_start = t.perf_counter()\n",
        "while True:\n",
        "    try:\n",
        "        user_ans1 = int(input(\"First pair? (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12): \"))\n",
        "        print(\"\")\n",
        "        if 1 <= user_ans1 <= 12:\n",
        "            break\n",
        "        else:\n",
        "            print(\"Please give a number between 1 and 12.\")\n",
        "            print(\"\")\n",
        "    except ValueError:\n",
        "        print(\"Please give a valid number.\")\n",
        "        print(\"\")\n",
        "\n",
        "# Input validation for the second pair\n",
        "while True:\n",
        "    try:\n",
        "        user_ans2 = int(input(\"Second pair?: \"))\n",
        "        print(\"\")\n",
        "        if 1 <= user_ans2 <= 12:\n",
        "            break\n",
        "        else:\n",
        "            print(\"Please give a number between 1 and 12.\")\n",
        "            print(\"\")\n",
        "    except ValueError:\n",
        "        print(\"Please give a valid number.\")\n",
        "        print(\"\")\n",
        "\n",
        "# Getting the actual pairs based on user selection\n",
        "pair1 = flattened_pairs[user_ans1 - 1]  # Convert 1-based index to 0-based\n",
        "pair2 = flattened_pairs[user_ans2 - 1]  # Convert 1-based index to 0-based\n",
        "timer_end = t.perf_counter()\n",
        "timer_passed = np.subtract(timer_end,timer_start)\n",
        "# Check if the sum of selected pairs matches the target\n",
        "if (pair1[0] + pair2[0] == target_pair[0]) and (pair1[1] + pair2[1] == target_pair[1]):\n",
        "    print(\"You win! The pairs add up correctly.\")\n",
        "    print(\"\")\n",
        "    print(f\"Your time: {timer_passed:.2}\")\n",
        "else:\n",
        "    print(\"Try again! The pairs don't add up to the target.\")\n",
        "    print(\"\")\n",
        "    print(f\"Your time: {timer_passed:.2} seconds\")\n"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMlK6F4sDjVp3AEQ1cKJy9M",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}